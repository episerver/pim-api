/* Ref: proto types - https://learn.microsoft.com/vi-vn/aspnet/core/grpc/protobuf?view=aspnetcore-7.0*/

syntax = "proto3";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

package Optimizely.PIM.Data.V1;

// This service allows clients to import product & its related data and monitor the import status
service DataIntegration {   
    // ImportProduct allows streaming of product data for bulk imports
    // 
    // The client streams product data in chunks, which are then processed as a batch
    //
    // Returns:
    //      - success flag and a request ID for tracking
    //      - unsuccess flag and an error message if the import fails to initiate
    //          For example, {"IsSuccess":false,"ErrorMessage":"Import template does not exist!","RequestId":null}
    //          
    //          Errors:
    //              The requested data exceeds the maximum records:
    //                  - response will include the error message "The request data exceeds 200k records"
    //              Timezone is not set in request data:
    //                  - The response will include the error message "Missing timezone!"
    //              The given timezone does not exist or correct:
    //                  - The response will include the error message "Timezone is not found!"
    //              Missing product number of any product in request data:
    //                  - The response will include the error message "Product number of some records are missing"
    //              Given product import template doesn't exist in PIM:
    //                  - The response will include the error message "Import template does not exist!"
    //              Given product import template doesn't match with product's information in the request data:
    //                  - The response will include the error message "Product data do not match with given template"    
    rpc ImportProduct (stream ImportProductRequest) returns (ImportProductResponse);

    // GetImportStatus retrieves the current status of an import operation
    //
    // Provide the request ID returned from ImportProduct to track its progress   
    rpc GetImportStatus (GetImportStatusRequest) returns (GetImportStatusResponse);
}

// ImportProductRequest contains product data for importing
message ImportProductRequest {
    // Import template name which client has to pre-defined in PIM for mapping between client's data with PIM's properties
    google.protobuf.StringValue importTemplate = 1;
  
    // Time zone identifier for date/time field parsing (for example: Asia/Bangkok)
    string timeZone = 2;

    // List of products to import
    repeated Product products = 3;
}

// Product represents a product to be imported
message Product {
    /*
       [PIM System Property] Unique product identifier.
       In the case of import-related product data only, we just need to set the value for Product Number 
       and related data (product Assets, product Categories, productRelatedProducts) in request data.
    */
    string productNumber = 1;

    // [PIM System Property] Product display name
    google.protobuf.StringValue productTitle = 2;

    // [PIM System Property] URL-friendly segment for the product
    google.protobuf.StringValue urlSegment = 3;

    // Template name to use for this product
    google.protobuf.StringValue productTemplate = 4;

    // [PIM System Property] When the product should be deactivated
    google.protobuf.Timestamp deactivateOn = 5;

    // [PIM System Property] Variant type name which will be set on parent product
    google.protobuf.StringValue variantType = 6;

    // [PIM System Property] Product number of parent product which will be set on child product
    google.protobuf.StringValue parentProduct = 7;

    /*
        It contains the rest of properties name and their value in the product template that couldn't map with PIM system properties.
        For example, 
            In product template 'Shirt' has non system property 'Color'. This have to be in propertyBag as [{'Color': 'Red'}]
    */    
    map<string, string> propertyBag = 8;
       
    // Assets (images, documents) related to this product
    // Let it empty in case no asset needs to be assigned.
    repeated ProductAsset productAssets = 9;

    // Categories this product belongs to
    // Let it empty in case no category needs to be assigned.
    repeated ProductCategory productCategories = 10;
   
    // Related products (cross-sells, up-sells, etc.)
    // Let it empty in case no related product needs to be assigned.
    repeated ProductRelatedProduct productRelatedProducts = 11;
}

// ProductAsset links a product to an asset
message ProductAsset {
    // Folder containing the asset
    string assetFolder = 1;
    
    // Name of the asset
    string assetName = 2;
    
    // Whether this is the primary asset for the product
    google.protobuf.BoolValue isPrimary = 3;

    // Whether to remove this asset from the product
    google.protobuf.BoolValue isUnassign = 4;
}

// ProductCategory links a product to a category
message ProductCategory {
    // Category tree identifier
    string categoryTree = 1;

    // Category path elements
    repeated string categories = 2;

    /*
        For B2C Commerce, a category can be set as a primary one of a product and this flag is dedicated for that purpose.
        This could be ignored as a null value in B2B Commerce
    */ 
    google.protobuf.BoolValue isPrimary = 3;

    // Whether to remove this category from the product
    google.protobuf.BoolValue isUnassign = 4;
}

// ProductRelatedProduct defines relationships between products
message ProductRelatedProduct {
    // Product number of the related product
    string productNumber = 1;

    // Type of relationship (cross-sell, up-sell, etc.)
    string relationshipType = 2;

    // Whether to remove this relationship
    google.protobuf.BoolValue isUnassign = 3;
}

// ImportProductResponse provides the result of an import request
message ImportProductResponse {
    // Whether the import was successfully initiated
    bool isSuccess = 1;
        
    // Error message if the import failed to initiate
    google.protobuf.StringValue errorMessage = 2;

    // ID to track the import status
    google.protobuf.StringValue requestId = 3;
}

// GetImportStatusRequest to check on an import's progress
message GetImportStatusRequest {
  // The ID received from a successful ImportProductResponse
    string requestId = 1;
}

// GetImportStatusResponse with the current state of the import
message GetImportStatusResponse {
  // Status of product data import
  string import_product_status = 1;
  
  // Status of product asset import
  string import_product_asset_status = 2;
  
  // Status of product category import
  string import_product_category_status = 3;
  
  // Status of related product import
  string import_product_related_product_status = 4;
}
